set nocompatible "must be first line
set encoding=utf-8
scriptencoding utf-8
set signcolumn=yes
set completeopt=menuone,noselect

filetype off
call plug#begin('~/.vim/bundle')

" to be retired
"
" Plug 'Shougo/denite.nvim'
" Plug '/usr/local/opt/fzf'
" Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
" Plug 'junegunn/fzf.vim'
" Plug 'kien/ctrlp.vim'
" Plug 'mattn/emmet-vim'
" Plug 'mhartington/oceanic-next'
" Plug 'posva/vim-vue'
" Plug 'vim-scripts/tlib'
" Plug 'vimwiki/vimwiki'
" Plug 'sheerun/vim-polyglot' " syntax for programming languages
" Plug 'ryanoasis/vim-devicons'
" Plug 'MarcWeber/vim-addon-mw-utils'
" Plug 'tpope/vim-rails'
"Plug 'hzchirs/vim-material'
"
"

"
" colorscheme
Plug 'NLKNguyen/papercolor-theme'
Plug 'cormacrelf/vim-colors-github'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'sainnhe/gruvbox-material'

Plug 'Shougo/echodoc.vim'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'akinsho/flutter-tools.nvim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'connorholyday/vim-snazzy'
" Plug 'dart-lang/dart-vim-plugin'
Plug 'digitaltoad/vim-pug'
Plug 'editorconfig/editorconfig-vim'
"
" Auto-completions
Plug 'hrsh7th/nvim-compe'
Plug 'jiangmiao/auto-pairs'
" Plug 'honza/vim-snippets'
" Plug 'SirVer/Ultisnips'
"
" fuzzy search
"
" Plug 'mileszs/ack.vim'
"
" Navigation
"
"
" Plug 'itchyny/calendar.vim'
Plug 'junegunn/seoul256.vim'
Plug 'kana/vim-textobj-user'
Plug 'kshenoy/vim-signature'
Plug 'lervag/vimtex'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
Plug 'sjl/gundo.vim'
Plug 'sukima/xmledit'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-cucumber'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'
Plug 'tyru/open-browser.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-ruby/vim-ruby'
Plug 'vim-scripts/dbext.vim'
Plug 'vim-scripts/gnuplot.vim'
Plug 'vim-scripts/tabular'
Plug 'zaiste/tmux.vim'
"""

autocmd FileType dart setlocal commentstring=//\ %s


" LSP
Plug 'neovim/nvim-lspconfig'
" Plug 'glepnir/lspsaga.nvim'
Plug 'tami5/lspsaga.nvim'
Plug 'overcache/NeoSolarized'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'kyazdani42/nvim-web-devicons'

call plug#end()


" LSPSaga
" if !exists('g.loaded_lspsaga') | finish | endif
lua << EOF
  local saga = require 'lspsaga'
  saga.init_lsp_saga {
  error_sign = '',
  warn_sign = '',
  hint_sign = '',
  infor_sign = '',
  border_style = "round",
  }
EOF

"
nnoremap <silent>fa <cmd>lua require('lspsaga.codeaction').code_action()<CR>
nnoremap <silent>mv <cmd>Lspsaga rename<CR>
nnoremap <silent>gn <cmd>Lspsaga diagnostic_jump_next<CR>
nnoremap <silent>gp <cmd>Lspsaga diagnostic_jump_previous<CR>
nnoremap <silent>K <cmd>Lspsaga hover_doc<CR>
inoremap <silent><C-k> <cmd>Lspsaga signature_help<CR>
nnoremap <silent>gh <cmd>Lspsaga lsp_finder<CR>
" scroll up hover doc
nnoremap <silent> <C-f> <cmd>lua require('lspsaga.action').smart_scroll_with_saga(1)<CR>
" scroll down hover doc or scroll in definition preview
nnoremap <silent> <C-b> <cmd>lua require('lspsaga.action').smart_scroll_with_saga(-1)<CR>


"""
"
lua << EOF

EOF

"""
" nvim-compe
"
lua << EOF
require'compe'.setup {
  enabled = true;
  autocomplete = true;
  debug = false;
  min_length = 1;
  preselect = 'enable';
  throttle_time = 80;
  source_timeout = 200;
  incomplete_delay = 400;
  max_abbr_width = 100;
  max_kind_width = 100;
  max_menu_width = 100;
  documentation = true;
  --
  source = {
    path = true;
    nvim_lsp = true;
  };
}

local t = function(str)
  return vim.api.nvim_replace_termcodes(str, true, true, true)
end

local check_back_space = function()
    local col = vim.fn.col('.') - 1
    if col == 0 or vim.fn.getline('.'):sub(col, col):match('%s') then
        return true
    else
        return false
    end
end

-- Use (s-)tab to:
--- move to prev/next item in completion menuone
--- jump to prev/next snippet's placeholder
_G.tab_complete = function()
  if vim.fn.pumvisible() == 1 then
    return t "<C-n>"
  elseif check_back_space() then
    return t "<Tab>"
  else
    return vim.fn['compe#complete']()
  end
end
_G.s_tab_complete = function()
  if vim.fn.pumvisible() == 1 then
    return t "<C-p>"
  else
    return t "<S-Tab>"
  end
end

vim.api.nvim_set_keymap("i", "<Tab>", "v:lua.tab_complete()", {expr = true})
vim.api.nvim_set_keymap("s", "<Tab>", "v:lua.tab_complete()", {expr = true})
vim.api.nvim_set_keymap("i", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})
vim.api.nvim_set_keymap("s", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})

--This line is important for auto-import
vim.api.nvim_set_keymap('i', '<cr>', 'compe#confirm("<cr>")', { expr = true })
vim.api.nvim_set_keymap('i', '<c-space>', 'compe#complete()', { expr = true })

EOF




"-------

"
" let g:compe = {}
" let g:compe.enabled = v:true
" let g:compe.autocomplete = v:true
" let g:compe.debug = v:false
" let g:compe.min_length = 1
" let g:compe.preselect = 'enable'
" let g:compe.throttle_time = 80
" let g:compe.source_timeout = 200
" let g:compe.resolve_timeout = 800
" let g:compe.incomplete_delay = 400
" let g:compe.max_abbr_width = 100
" let g:compe.max_kind_width = 100
" let g:compe.max_menu_width = 100
" let g:compe.documentation = v:false
"
" let g:compe.source = {}
" let g:compe.source.path = v:true
" let g:compe.source.buffer = v:true
" let g:compe.source.calc = v:true
" let g:compe.source.nvim_lsp = v:true
" let g:compe.source.nvim_lua = v:true
" let g:compe.source.vsnip = v:true
" let g:compe.source.ultisnips = v:true
" let g:compe.source.luasnip = v:true
" let g:compe.source.emoji = v:true
" let g:compe.source.treesitter = v:true



filetype plugin indent on " Automatically detect file types.
syntax on " syntax highlighting

set shortmess+=cafilmnrxoOtT " abbrev. of messages (avoids 'hit enter')
set virtualedit=onemore " allow for cursor beyond last character
set history=1000 " Store a ton of history (default is 20)
"TODO-- save undo levels to disk"
set nospell " spell checking on

"!end"

"  no backups
set nobackup
set noswapfile
set nowritebackup
"au BufWinLeave * silent! mkview "make vim save view (state) (folds, cursor, etc)
"au BufWinEnter * silent! loadview "make vim load view (state) (folds, cursor, etc)

autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \ exe "normal g`\"" |
    \ endif


" colors
" set t_Co=256
set termguicolors
set background=dark " Assume a dark background
" colorscheme vim-material
colorscheme jellybeans
" colorscheme OceanicNextLight

" colorscheme OceanicNext
hi clear SpellBad
hi SpellBad cterm=undercurl
set tabpagemax=15 " only show 15 tabs
set title
set visualbell " don't beep"
set noerrorbells " don't beep"

"statusline
set laststatus=2
set linespace=0 " No extra spaces between rows
set number " Line numbers on
set cursorline
" set cursorcolumn
set showmatch " show matching brackets/parenthesis
set incsearch " find as you type search
set nohlsearch " highlight search terms
set winminheight=0 " windows can be 0 line high
set fillchars+=vert:│  "Neat vertical window separator line
set ignorecase " case insensitive search
set smartcase " case sensitive when uc present
set wildmenu " show list instead of just completing
set wildignorecase " case insensitivity for the filename completion"
set wildmode=longest,list,full " command <Tab> completion, list matches, then longest common part, then all.
set wildignore+=*.pdf,*/tmp/*,*.so,*.swp,*.zip
set wildignore+=*.png
set wildignore+=*.jpg
set wildignore+=*.gif
set wildignore+=*.g.dart,pubspec.lock


set lazyredraw " redraw only when necessary
autocmd FileType help wincmd L " open help window in vertical split


let g:mapleader=","

" Exclude files and directories with ctrlp
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

" Silver Searcher https://github.com/ggreer/the_silver_searcher
"TODO Speed up but remove the conditional
"TODO Create a script to check Vim dependencies so you don't check them every time
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag -Q -l --nocolor --hidden -g "" %s'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif


set whichwrap=b,s,h,l,<,>,[,] " backspace and cursor keys wrap to
set scrolljump=5 " lines to scroll when cursor leaves screen
set scrolloff=3 " minimum lines to keep above and below cursor
set gdefault " the /g flag on :s substitutions by default

set modeline
set modelines=5

""--TODO: set magic=very
nnoremap / /\v
vnoremap / /\v
nnoremap ? /\v
vnoremap ? ?\v
cnoremap %s/ %s/\v
cnoremap %g/ %g/\v
" TODO add very magic to multi-line selection
"

" Windows focus movements
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <silent>gw <c-w>w " go to the new window"
nnoremap <silent>fj <c-w>w " go to the new window"
" nnoremap <c-k> <c-w>k
" nnoremap <c-h> <c-w>h
" nnoremap <c-l> <c-w>l


"TODO: Navigation
" Switch between the last 2 files
nnoremap <leader>b  <c-^>
map gl :buffers<CR>
map gb :bnext<CR>
map gB :bprev<CR>


" set wildcharm=<C-z>
" nnoremap <leader>b :buffer <C-z><S-Tab>
" nnoremap <leader>B :sbuffer <C-z><S-Tab>



" automatically resize windows
autocmd vimResized * :wincmd =

" TODO: I need to spend some time to be comfortable with vim folds
" set foldenable " auto fold code

" Formatting
set nowrap " wrap long lines
set autoindent " indent at the same level of the previous line
set shiftwidth=2 " use indents of 2 spaces
set expandtab " insert spaces when TAB is pressed
set tabstop=2 " an indentation every two columns
"set softtabstop=2 " let backspace delete indent
set matchpairs+=<:> " match, to be used with %
"set pastetoggle=<F12> " pastetoggle (sane indentation on pastes)
let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '`':'`','<':'>'}

" Key (re)Mappings
" Making it so ; works like : for commands. Saves typing and eliminates :W style typos due to lazy holding shift.
nnoremap ; :

" set digraph if working with French file
set digraph
"
"
"

"edit/reload the vimrc filep
nmap <silent> <leader>v :e ~/.config/nvim/init.vim<CR>
nmap <silent> <leader>s :source $MYVIMRC<CR>
nmap <silent> <leader>j :e ~/journal.adoc<CR>
nmap <silent> <leader>p :e ~/pushups.adoc<CR>
" nmap <silent> <leader>g :e ~/deferred-gratifications.adoc<CR>
nmap <silent> <leader>n :e ~/dev.adoc<CR>


nmap <silent> <leader>1b ysiw*<ESC>
nmap <silent> <leader>2b ebys2w*<ESC>
nmap <silent> <leader>3b ebys3w*<ESC>
nmap <silent> <leader>4b ebys4w*<ESC>
nmap <silent> <leader>5b ebys5w*<ESC>
nmap <silent> <leader>6b ebys6w*<ESC>

" copy the configuration of routers
nmap <silent> <leader>r1 /R1\s*$<CR>yip<ESC>
nmap <silent> <leader>r2 /R2\s*$<CR>yip<ESC>
nmap <silent> <leader>r3 /R3\s*$<CR>yip<ESC>
nmap <silent> <leader>r4 /R4\s*$<CR>yip<ESC>
nmap <silent> <leader>r5 /R5\s*$<CR>yip<ESC>
nmap <silent> <leader>r6 /R6\s*$<CR>yip<ESC>
nmap <silent> <leader>r7 /R7\s*$<CR>yip<ESC>
nmap <silent> <leader>r8 /R8\s*$<CR>yip<ESC>
nmap <silent> <leader>r9 /R9\s*$<CR>yip<ESC>
nmap <silent> <leader>r10 /R10\s*$<CR>yip<ESC>
nmap <silent> <leader>s1 /S1\s*$<CR>yip<ESC>
nmap <silent> <leader>s2 /S2\s*$<CR>yip<ESC>
nmap <silent> <leader>s3 /S3\s*$<CR>yip<ESC>
nmap <silent> <leader>s4 /S4\s*$<CR>yip<ESC>


set ttyfast " send more characters for redraws"

"source vimrc each time I save it
" if has("autocmd")
"   autocmd bufwritepost .vimrc source $MYVIMRC
" end

"edit list of abbreviations
" nmap <silent> <leader>a :tabedit ~/.vim/abbreviations.txt<CR>

" set listchars=""
set listchars=tab:▒░,trail:▓,nbsp:░
" Fuzzy Finder
""" Fuzzy Find file, tree, buffer, line
" nmap <leader>ff :FufFile **/<CR>
"nmap <leader>ft :FufFile<CR>
"nmap <leader>fb :FufBuffer<CR>
"nmap <leader>fl :FufLine<CR>
"nmap <leader>fr :FufRenewCache<CR>

" dbext database plugin
" TODO: only for .sql files
"let g:dbext_default_profile = 'type=MYSQL:user=root:passwd=kyamukende:dbname=otrs:extra=-t'
let g:dbext_default_profile_ODBC = 'type=ODBC:dsnname=acdis:user=acapp_otrs:passwd=kyamukende:dbname=acdis'
let g:dbext_default_history_file = '~/.vim/dbext_sql_history.txt'
let g:dbext_default_PGSQL_cmd_terminator = ";"

source ~/.vim/abbreviations.txt



imap <F7>  <c-r>=strftime("%Y-%m-%d %H:%M")<cr>
nmap <F7>  a<C-R>=strftime("%Y-%m-%d %H:%M")<CR><ESC>
imap <F3> <C-R>=strftime("%H%M")<CR>
nmap <F3> a<C-R>=strftime("%H%M")<CR><esc>
set clipboard=unnamedplus "to copy/paste from/to system clipboard
vnoremap P <ESC>"+gP
nnoremap P <ESC>"+gP
nnoremap Y <ESC>"+y
vnoremap Y <ESC>"+y
set autowriteall " automatically write a file when leaving a modified buffer

" write with root permission
cmap w!! w !sudo tee % >/dev/null<CR>:e!<CR><CR>

" Gemmfile, Rakefile, Vagrantfile, Thorfile are Ruby"
au BufRead, BufNewFile {Gemfile,Gemfile.lock,Rakefile,Vagrantfile,Thorfile,config.ru, *.thor} set ft=ruby
au BufRead, BufNewFile {*.asciidoc,*.adoc,*.ad} set ft= asciidoc

" enable compiler support for ruby
compiler ruby

" to be removed
set maxmempattern=200000

"needed for ruby text objects
runtime macros/matchit.vim

" Ultisnips
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" let g:UltiSnipsSnippetDirectories=["UltiSnips"]

set tags=./tags;

" Gundo
nnoremap <leader>u :GundoToggle<cr>
let g:gundo_close_on_revert=1
set undofile


"TODO add flutter projections

" Rails.vim
"  :Rfea item
"TODO: Add this with projection
" let g:rails_projections = {
"       \ "test/features/*_test.rb": {
"             \"command": "feature",
"             \ "template": "class %SDecorator < SimpleDelegator\nend",
"             \ "test": [ "test/features/%s" ],
"             \ "affinity": "model"
"       \ },
"       \ "app/hyperloop/components/*.rb": {
"             \"command": "component",
"             \ "template": "class %SDecorator < SimpleDelegator\nend",
"             \ "test": [ "app/hyperloop/components/%s" ],
"             \ "affinity": "model"
"       \ }}
"
" Open browser
nmap <leader>w <Plug>(openbrowser-open)
vmap <leader>w <Plug>(openbrowser-open)

" utilities for Project Management
" "TODO: create snipmate shortcut
" nmap <leader>ls olog start: "<c-r>=strftime("%Y-%m-%d %a %H:%M")<cr>"<esc>
" imap <leader>ls log start: "<c-r>=strftime("%Y-%m-%d %a %H:%M")<cr>"
" nmap <leader>lp olog pause: "<c-r>=strftime("%Y-%m-%d %a %H:%M")<cr>"<esc>
" imap <leader>lp log pause: "<c-r>=strftime("%Y-%m-%d %a %H:%M")<cr>"
" nmap <leader>lf olog finish: "<c-r>=strftime("%Y-%m-%d %a %H:%M")<cr>"<esc>
" imap <leader>lf log finish: "<c-r>=strftime("%Y-%m-%d %a %H:%M")<cr>"
" nmap <leader>lr olog resume: "<c-r>=strftime("%Y-%m-%d %a %H:%M")<cr>"<esc>
" imap <leader>lr log resume: "<c-r>=strftime("%Y-%m-%d %a %H:%M")<cr>"

" Airline
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline_symbols.linenr = "|"
let g:airline_theme='zenburn'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1 " Enable enhanced tabline
let g:airline#extensions#tabline#show_tab_nr = 0 " Don't display tab numbers
" let g:airline#extensions#tabline#buffer_idx_mode = 0
" let g:airline#extensions#tabline#show_splits = 1

" let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
" let g:airline#extensions#tabline#buffer_nr_show = 1
" let g:airline#extensions#tabline#show_tab_type = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
" set guifont=Inconsolata\ for\ Powerline:h14
set guifont=Victor\ Mono:h18
set noshowmode
set noshowcmd " do not show last command

"let g:NERDTreeStatusline = ''
" let g:NERDTreeShowHidden = 1
" let g:NERDTreeMinimalUI = 1


" " Vim-test
" " To be combined with tslime
" nnoremap <silent> <Leader>t :TestFile<CR>
" nnoremap <silent> <Leader>s :TestNearest<CR>
" nnoremap <silent> <Leader>l :TestLast<CR>
" nnoremap <silent> <Leader>a :TestSuite<CR>
" nnoremap <silent> <leader>=> :TestVisit<CR>
"


" Ale
" let g:airline#extensions#ale#enabled = 1
" let g:ale_lint_on_enter = 0 " Don't run the linter on entering the file
" let g:ale_sign_column_always = 1
" let g:ale_sign_error = '●'
" let g:ale_set_highlights = 0
" let g:ale_fixers = {'javascript': ['prettier'], 'vue': ['eslint'], 'json': ['prettier'], 'ts': ['prettier']}
" let g:ale_linters = {'javascript': ['']}
" let g:ale_fix_on_save = 1
" let g:ale_linter_aliases = {'vue': ['css', 'javascript']}

" Plug Vim-Javascript
" let g:jsx_ext_required = 0






" Plug 'javascript-libraries-syntax.vim'
let g:used_javascript_libs = 'underscore,angularjs,jasmine,chai,react,vue'

" Vue
" let g:vue_disable_pre_processors=1
" autocmd BufNewFile,BufReadPost *.vue
" autocmd FileType vue syntax sync fromstart
"
"
"
"
"
"
"
" set suffixesadd+=.vue

" save the file when you switch buffers
au FocusLost * silent! wa
au BufLeave * silent! update
set autowrite



" echodoc
set noshowmode
let g:echodoc_enable_at_startup = 1



" https://coderwall.com/p/prfnnw/vim-to-do-list
" Generate a to-do list in the quickfix list
" command Todo noautocmd vimgrep /TODO\|FIXME/j ** | cw

" Remove trailing whitespace on save
autocmd BufWritePre * %s/\s\+$//e


"vimtex
" let g:vimtex_view_method = 'zathura'
let g:tex_flavor = 'latex'
let g:vimtex_compiler_progname = 'nvr'

" Fuzzy search
nnoremap <leader><leader> :CtrlP<CR>


" LSPconfig
nnoremap <silent>gd <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent>gD <cmd>lua vim.lsp.buf.declaration()<CR>
nnoremap <silent>gr <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <silent>gi <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> <C-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
" nnoremap <silent>gp <cmd>lua vim.lsp.diagnostic.goto_prev()<CR>
" nnoremap <silent>gn <cmd>lua vim.lsp.diagnostic.goto_next()<CR>
" buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
nnoremap <silent>ca <cmd>lua vim.lsp.buf.code_action()<CR>
"
""" auto-format
autocmd BufWritePre *.js lua vim.lsp.buf.formatting_sync(nil, 100)
autocmd BufWritePre *.jsx lua vim.lsp.buf.formatting_sync(nil, 100)
autocmd BufWritePre *.py lua vim.lsp.buf.formatting_sync(nil, 100)
autocmd BufWritePre *.dart lua vim.lsp.buf.formatting_sync(nil, 100)



" Flutter-tools
lua << EOF
-- alternatively you can override the default configs
require("flutter-tools").setup {
  ui = {
    -- the border type to use for all floating windows, the same options/formats
    -- used for ":h nvim_open_win" e.g. "single" | "shadow" | {<table-of-eight-chars>}
    border = "rounded",
  },
  decorations = {
    statusline = {
      -- set to true to be able use the 'flutter_tools_decorations.app_version' in your statusline
      -- this will show the current version of the flutter app from the pubspec.yaml file
      app_version = false,
      -- set to true to be able use the 'flutter_tools_decorations.device' in your statusline
      -- this will show the currently running device if an application was started with a specific
      -- device
      device = true  ,
    }
  },
  debugger = { -- integrate with nvim dap + install dart code debugger
    enabled = false,
  },
  flutter_lookup_cmd = nil, -- example "dirname $(which flutter)" or "asdf where flutter"
  widget_guides = {
    enabled = false,
  },
  closing_tags = {
    prefix = "// ", -- character to use for close tag e.g. > Widget
    enabled = true -- set to false to disable
  },
  dev_log = {
    -- open_cmd = "tabedit", -- command to use to open the log buffer
  },
  dev_tools = {
    autostart = false, -- autostart devtools server if not detected
    auto_open_browser = false, -- Automatically opens devtools in the browser
  },
  outline = {
    open_cmd = "30vnew", -- command to use to open the outline buffer
    auto_open = false -- if true this will open the outline automatically when it is first populated
  },
  lsp = {
 --   on_attach = my_custom_on_attach,
    --capabilities = my_custom_capabilities -- e.g. lsp_status capabilities
    --- OR you can specify a function to deactivate or change or control how the config is created
    -- capabilities = function(config)
    --   config.specificThingIDontWant = false
    --   return config
    --end,
    settings = {
      showTodos = false,
      completeFunctionCalls = true,
      analysisExcludedFolders = {'/home/ckyony/.pub-cache', '/opt/flutter'}
      -- analysisExcludedFolders = {'/opt/flutter'}
    }
  }
}
EOF
nnoremap <silent>fe <cmd>FlutterEmulators<cr>
nnoremap <silent>fd <cmd>FlutterDevices<cr>
nnoremap <silent>fo <CMD>FlutterOutlineToggle<cr>
nnoremap <silent>fq <CMD>FlutterQuit<cr>
nnoremap <silent>fp <CMD>FlutterPubGet<cr>
nnoremap <silent>fr <CMD>FlutterRestart<cr>
nnoremap <silent>fl <CMD>FlutterLogClear<cr>
"""
" Treesitter
"
lua << EOF
require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,
    disable = {},
  },
  indent = {
    enable = false,
    disable = {},
  },
  ensure_installed = {
    "dart"
  },
}
-- local parser_config = require "nvim-mtreesitter.parsers".get_parser_configs()
-- parser_config.tsx.used_by = { "javascript", "typescript.tsx" }
EOF

"""
" Ruby
"
" to fix :checkhealth
let g:ruby_host_prog = '/home/ckyony/.gem/ruby/3.0.0/bin/neovim-ruby-host'

"""
" Telescope
"
lua << EOF
local actions = require('telescope.actions')
require('telescope').setup{
  defaults = {
    mappings = {
      n = {
        ["x"] = actions.close
      },
    },
  }
}
EOF

nnoremap <silent> ff <cmd>Telescope find_files<cr>
nnoremap <silent> fl <cmd>Telescope live_grep<cr>
nnoremap <silent> fb <cmd>Telescope buffers<cr>
nnoremap <silent> fh <cmd>Telescope help_tags<cr>


set nocompatible "must be first line
set encoding=utf-8
scriptencoding utf-8

filetype off
call plug#begin('~/.vim/bundle')

" Plug 'othree/html5.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'digitaltoad/vim-pug'
" Plug 'othree/yajs.vim'
Plug 'posva/vim-vue'
Plug 'leshill/vim-json'
Plug 'itchyny/calendar.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'kana/vim-textobj-user'
Plug 'sheerun/vim-polyglot' " syntax for programming languages
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'mileszs/ack.vim'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'NLKNguyen/papercolor-theme'
" Plug 'w0rp/ale'
" Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'
Plug 'sjl/gundo.vim'
Plug 'sukima/xmledit'
Plug 'tomtom/tcomment_vim'
" Plug 'tpope/vim-bundler'
" Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tyru/open-browser.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-ruby/vim-ruby'
Plug 'vim-scripts/dbext.vim'
Plug 'vim-scripts/gnuplot.vim'
Plug 'vim-scripts/tabular'
Plug 'vim-scripts/tlib'
Plug 'zaiste/tmux.vim'
" Plug 'fleischie/vim-styled-components'
" Plug 'endel/vim-github-colorscheme'
" Plug 'pangloss/vim-javascript'
" Plug 'mxw/vim-jsx'
" Plug 'gyim/vim-boxdraw'
" Plug 'mattn/emmet-vim'
" Plug 'kalafut/vim-taskjuggler'
Plug 'kien/ctrlp.vim'
Plug 'Shougo/echodoc.vim'

call plug#end()

filetype plugin indent on " Automatically detect file types.
syntax on " syntax highlighting

set shortmess+=cafilmnrxoOtT " abbrev. of messages (avoids 'hit enter')
set virtualedit=onemore " allow for cursor beyond last character
set history=1000 " Store a ton of history (default is 20)
"TODO-- save undo levels to disk"
set nospell " spell checking on

"! to be redo in coffee script syntax"
hi link coffeeSpaceError NONE
hi link coffeeSemicolonError NONE
hi link coffeeReservedError NONE
au BufNewFile, BufReadPost *.coffee setl foldmethod=indent nofoldenable
"!end"

"  no backups
set nobackup
set noswapfile
"au BufWinLeave * silent! mkview "make vim save view (state) (folds, cursor, etc)
"au BufWinEnter * silent! loadview "make vim load view (state) (folds, cursor, etc)


autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \ exe "normal g`\"" |
    \ endif

" colors
set t_Co=256

set background=dark " Assume a dark background
colorscheme solarized
hi clear SpellBad
hi SpellBad cterm=undercurl
set tabpagemax=15 " only show 15 tabs
set title
set visualbell " don't beep"
set noerrorbells " don't beep"

"statusline
set laststatus=2

set linespace=0 " No extra spaces between rows
" set number " Line numbers on
set cursorline
set cursorcolumn
set showmatch " show matching brackets/parenthesis
set incsearch " find as you type search
set nohlsearch " highlight search terms
set winminheight=0 " windows can be 0 line high
set fillchars+=vert:│  "Neat vertical window separator line
set ignorecase " case insensitive search
set smartcase " case sensitive when uc present
set wildmenu " show list instead of just completing
set wildignorecase " case insensitivity for the filename completion"
set wildmode=longest,list,full " command <Tab> completion, list matches, then longest common part, then all.
set wildignore+=*.pdf,*/tmp/*,*.so,*.swp,*.zip
set wildignore+=*.png
set wildignore+=*.jpg
set wildignore+=*.gif
set lazyredraw " redraw only when necessary
autocmd FileType help wincmd L " open help window in vertical split

" Exclude files and directories with ctrlp
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

" Silver Searcher https://github.com/ggreer/the_silver_searcher
"TODO Speed up but remove the conditional
"TODO Create a script to check Vim dependencies so you don't check them every time
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag -Q -l --nocolor --hidden -g "" %s'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif


set whichwrap=b,s,h,l,<,>,[,] " backspace and cursor keys wrap to
set scrolljump=5 " lines to scroll when cursor leaves screen
set scrolloff=3 " minimum lines to keep above and below cursor
set gdefault " the /g flag on :s substitutions by default

set modeline
set modelines=5

""--TODO: set magic=very
nnoremap / /\v
vnoremap / /\v
nnoremap ? /\v
vnoremap ? ?\v
cnoremap %s/ %s/\v
cnoremap %g/ %g/\v


" Windows focus movements
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

"TODO: Navigation
" Switch between the last 2 files
nnoremap <leader><leader>  <c-^>
map gl :buffers<CR>
map gb :bnext<CR>
map gB :bprev<CR>


" set wildcharm=<C-z>
" nnoremap <leader>b :buffer <C-z><S-Tab>
" nnoremap <leader>B :sbuffer <C-z><S-Tab>



" automatically resize windows
autocmd vimResized * :wincmd =

" TODO: I need to spend some time to be comfortable with vim folds
" set foldenable " auto fold code

" Formatting
set nowrap " wrap long lines
set autoindent " indent at the same level of the previous line
set shiftwidth=2 " use indents of 2 spaces
set expandtab " insert spaces when TAB is pressed
set tabstop=2 " an indentation every two columns
"set softtabstop=2 " let backspace delete indent
set matchpairs+=<:> " match, to be used with %
"set pastetoggle=<F12> " pastetoggle (sane indentation on pastes)
let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '`':'`'}

" Key (re)Mappings
" Making it so ; works like : for commands. Saves typing and eliminates :W style typos due to lazy holding shift.
nnoremap ; :

" set digraph if working with French file

" when you forgot to sudo before editing a file
" cmap sw  w  !sudo tee % >/dev/null

let g:mapleader=","
"quick edit/reload the vimrc filep
nmap <silent> <leader>v :e $MYVIMRC<CR>
nmap <silent> <leader>s :source $MYVIMRC<CR>
nmap <silent> <leader>j :e ~/journal.adoc<CR>
nmap <silent> <leader>c :e ~/ccie.adoc<CR>
nmap <silent> <leader>g :e ~/deferred-gratifications.adoc<CR>
nmap <silent> <leader>n :e ~/dev.adoc<CR>


nmap <silent> <leader>1b ysiw*<ESC>
nmap <silent> <leader>2b ebys2w*<ESC>
nmap <silent> <leader>3b ebys3w*<ESC>
nmap <silent> <leader>4b ebys4w*<ESC>
nmap <silent> <leader>5b ebys5w*<ESC>
nmap <silent> <leader>6b ebys6w*<ESC>

" copy the configuration of routers
nmap <silent> <leader>r1 /R1\s*$<CR>yip<ESC>
nmap <silent> <leader>r2 /R2\s*$<CR>yip<ESC>
nmap <silent> <leader>r3 /R3\s*$<CR>yip<ESC>
nmap <silent> <leader>r4 /R4\s*$<CR>yip<ESC>
nmap <silent> <leader>r5 /R5\s*$<CR>yip<ESC>
nmap <silent> <leader>r6 /R6\s*$<CR>yip<ESC>
nmap <silent> <leader>r7 /R7\s*$<CR>yip<ESC>
nmap <silent> <leader>r8 /R8\s*$<CR>yip<ESC>
nmap <silent> <leader>r9 /R9\s*$<CR>yip<ESC>
nmap <silent> <leader>r10 /R10\s*$<CR>yip<ESC>
nmap <silent> <leader>s1 /S1\s*$<CR>yip<ESC>
nmap <silent> <leader>s2 /S2\s*$<CR>yip<ESC>
nmap <silent> <leader>s3 /S3\s*$<CR>yip<ESC>
nmap <silent> <leader>s4 /S4\s*$<CR>yip<ESC>


set ttyfast " send more characters for redraws"

"source vimrc each time I save it
if has("autocmd")
  autocmd bufwritepost .vimrc source $MYVIMRC
end

"edit list of abbreviations
nmap <silent> <leader>a :tabedit ~/.vim/abbreviations.txt<CR>

set listchars=""
" Fuzzy Finder
""" Fuzzy Find file, tree, buffer, line
"nmap <leader>ff :FufFile **/<CR>
"nmap <leader>ft :FufFile<CR>
"nmap <leader>fb :FufBuffer<CR>
"nmap <leader>fl :FufLine<CR>
"nmap <leader>fr :FufRenewCache<CR>

" dbext database plugin
" TODO: only for .sql files
"let g:dbext_default_profile = 'type=MYSQL:user=root:passwd=kyamukende:dbname=otrs:extra=-t'
let g:dbext_default_profile_ODBC = 'type=ODBC:dsnname=acdis:user=acapp_otrs:passwd=kyamukende:dbname=acdis'
let g:dbext_default_history_file = '~/.vim/dbext_sql_history.txt'
let g:dbext_default_PGSQL_cmd_terminator = ";"

source ~/.vim/abbreviations.txt

imap <F7>  <c-r>=strftime("%Y-%m-%d %H:%M")<cr>
nmap <F7>  a<C-R>=strftime("%Y-%m-%d %H:%M")<CR><ESC>
imap <F3> <C-R>=strftime("%H%M")<CR>
nmap <F3> a<C-R>=strftime("%H%M")<CR><esc>
set clipboard=unnamedplus "to copy/paste from/to system clipboard
vnoremap P <ESC>"+gP
nnoremap P <ESC>"+gP
nnoremap Y <ESC>"+y
vnoremap Y <ESC>"+y
set autowriteall " automatically write a file when leaving a modified buffer

" write with root permission
cmap w!! w !sudo tee % >/dev/null<CR>:e!<CR><CR>

" Gemmfile, Rakefile, Vagrantfile, Thorfile are Ruby"
au BufRead, BufNewFile {Gemfile,Gemfile.lock,Rakefile,Vagrantfile,Thorfile,config.ru, *.thor} set ft=ruby
au BufRead, BufNewFile {*.asciidoc,*.adoc,*.ad} set ft= asciidoc

" enable compiler support for ruby
compiler ruby

" to be removed
set maxmempattern=200000

"needed for ruby text objects
runtime macros/matchit.vim

" Ultisnips
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" let g:UltiSnipsSnippetDirectories=["UltiSnips"]

set tags=./tags;

" Gundo
nnoremap <leader>u :GundoToggle<cr>
let g:gundo_close_on_revert=1

" Rails.vim
"  :Rfea item
"TODO: Add this with projection
let g:rails_projections = {
      \ "test/features/*_test.rb": {
            \"command": "feature",
            \ "template": "class %SDecorator < SimpleDelegator\nend",
            \ "test": [ "test/features/%s" ],
            \ "affinity": "model"
      \ },
      \ "app/hyperloop/components/*.rb": {
            \"command": "component",
            \ "template": "class %SDecorator < SimpleDelegator\nend",
            \ "test": [ "app/hyperloop/components/%s" ],
            \ "affinity": "model"
      \ }}

" Open browser
nmap <leader>w <Plug>(openbrowser-open)
vmap <leader>w <Plug>(openbrowser-open)

" utilities for Project Management
"TODO: create snipmate shortcut
nmap <leader>ls olog start: "<c-r>=strftime("%Y-%m-%d %a %H:%M")<cr>"<esc>
imap <leader>ls log start: "<c-r>=strftime("%Y-%m-%d %a %H:%M")<cr>"
nmap <leader>lp olog pause: "<c-r>=strftime("%Y-%m-%d %a %H:%M")<cr>"<esc>
imap <leader>lp log pause: "<c-r>=strftime("%Y-%m-%d %a %H:%M")<cr>"
nmap <leader>lf olog finish: "<c-r>=strftime("%Y-%m-%d %a %H:%M")<cr>"<esc>
imap <leader>lf log finish: "<c-r>=strftime("%Y-%m-%d %a %H:%M")<cr>"
nmap <leader>lr olog resume: "<c-r>=strftime("%Y-%m-%d %a %H:%M")<cr>"<esc>
imap <leader>lr log resume: "<c-r>=strftime("%Y-%m-%d %a %H:%M")<cr>"

" Airline
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline_symbols.linenr = "|"
let g:airline_theme='zenburn'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1 " Enable enhanced tabline
let g:airline#extensions#tabline#show_tab_nr = 0 " Don't display tab numbers
" let g:airline#extensions#tabline#buffer_idx_mode = 0 
" let g:airline#extensions#tabline#show_splits = 1

" let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
" let g:airline#extensions#tabline#buffer_nr_show = 1
" let g:airline#extensions#tabline#show_tab_type = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
set guifont=Inconsolata\ for\ Powerline:h14
set noshowmode

let g:NERDTreeStatusline = ''


" " Vim-test
" " To be combined with tslime
" nnoremap <silent> <Leader>t :TestFile<CR>
" nnoremap <silent> <Leader>s :TestNearest<CR>
" nnoremap <silent> <Leader>l :TestLast<CR>
" nnoremap <silent> <Leader>a :TestSuite<CR>
" nnoremap <silent> <leader>=> :TestVisit<CR>
"


" Ale
" let g:airline#extensions#ale#enabled = 1
" let g:ale_lint_on_enter = 0 " Don't run the linter on entering the file
" let g:ale_sign_column_always = 1
" let g:ale_sign_error = '●'
" let g:ale_set_highlights = 0
" let g:ale_fixers = {'javascript': ['prettier'], 'vue': ['eslint'], 'json': ['prettier'], 'ts': ['prettier']}
" let g:ale_linters = {'javascript': ['']}
" let g:ale_fix_on_save = 1
" let g:ale_linter_aliases = {'vue': ['css', 'javascript']}

" Plug Vim-Javascript
let g:jsx_ext_required = 0


" Plug 'javascript-libraries-syntax.vim'
let g:used_javascript_libs = 'underscore,angularjs,jasmine,chai,react'


" Vue
" let g:vue_disable_pre_processors=1
autocmd FileType vue syntax sync fromstart
" autocmd BufNewFile,BufRead *.vue set filetype=html

set suffixesadd+=.vue

" CoC
let g:coc_global_extensions = ['coc-solargraph'] 
 
 
 
 
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')


" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

let g:LanguageClient_serverCommands = { 'vue': ['vls'] }

" echodoc
set noshowmode
let g:echodoc_enable_at_startup = 1

set nocompatible " must be first line
set encoding=utf-8
scriptencoding utf-8

" Setup Vundle
filetype off
set runtimepath+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'kien/ctrlp.vim'
Plugin 'SirVer/ultisnips'
Plugin 'altercation/vim-colors-solarized'
Plugin 'jlangston/tomorrow-night-vim'
Plugin 'honza/vim-snippets'
Plugin 'kana/vim-textobj-user'
Plugin 'kchmck/vim-coffee-script'
Plugin 'nelstrom/vim-textobj-rubyblock'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-haml'
Plugin 'tpope/vim-projectionist'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-rake'
Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-surround'
Plugin 'vim-scripts/dbext.vim'
Plugin 'vim-scripts/gnuplot.vim'
Plugin 'vim-scripts/tabular'
Plugin 'vim-scripts/tlib'
Plugin 'croaky/vim-colors-github'
Plugin 'tomtom/tcomment_vim'
Plugin 'slim-template/vim-slim.git'
Plugin 'scrooloose/syntastic.git'
Plugin 'flazz/vim-colorschemes'
Plugin 'chriskempson/base16-vim'
Plugin 'mileszs/ack.vim'
Plugin 'dag/vim2hs'
Plugin 'sjl/gundo.vim.git'
Plugin 'rking/ag.vim'
Plugin 'zaiste/tmux.vim'
Plugin 'jceb/vim-orgmode'
Plugin 'tpope/vim-speeddating'
Plugin 'itchyny/calendar.vim'
Plugin 'sukima/xmledit'
"Plugin 'Lokaltog/powerline'
"Plugin 'valloric/youcompleteme.git'

call vundle#end()
filetype plugin indent on " Automatically detect file types.


syntax on " syntax highlighting

set shortmess+=afilmnrxoOtT " abbrev. of messages (avoids 'hit enter')
set virtualedit=onemore " allow for cursor beyond last character
set history=1000 " Store a ton of history (default is 20)
"todo-- save undo levels to disk"
set nospell " spell checking on

"! to be redo in coffee script syntax"
hi link coffeeSpaceError NONE
hi link coffeeSemicolonError NONE
hi link coffeeReservedError NONE
au BufNewFile, BufReadPost *.coffee setl foldmethod=indent nofoldenable
"!end"

" backups
set nobackup
set noswapfile
""set backupdir=~/tmp/backup
""set directory=~/tmp/swp
"au BufWinLeave * silent! mkview "make vim save view (state) (folds, cursor, etc)
"au BufWinEnter * silent! loadview "make vim load view (state) (folds, cursor, etc)


autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \ exe "normal g`\"" |
    \ endif


" colors 
set t_Co=256

set background=dark " Assume a dark background
colorscheme jellybeans
hi clear SpellBad
hi SpellBad cterm=undercurl
set tabpagemax=15 " only show 15 tabs
set showmode " display the current mode
set title 
set visualbell " don't beep"
set noerrorbells " don't beep"

"statusline
set laststatus=2

set linespace=0 " No extra spaces between rows
set number " Line numbers on
set cursorline 
set cursorcolumn
"set showmatch " show matching brackets/parenthesis
set incsearch " find as you type search
set nohlsearch " highlight search terms
set winminheight=0 " windows can be 0 line high
set fillchars+=vert:â”‚  "Neat vertical window separator line
set ignorecase " case insensitive search
set smartcase " case sensitive when uc present
set wildmenu " show list instead of just completing
set wildignorecase " case insensitivity for the filename completion"
set wildmode=longest,list,full " command <Tab> completion, list matches, then longest common part, then all.
set wildignore+=*.pdf,*/tmp/*,*.so,*.swp,*.zip
set wildignore+=*.png
set wildignore+=*.jpg
set wildignore+=*.gif
set lazyredraw " redraw only when necessary
autocmd FileType help wincmd L " open help window in vertical split

" Exclude files and directories with ctrlp
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }


set whichwrap=b,s,h,l,<,>,[,] " backspace and cursor keys wrap to
set scrolljump=5 " lines to scroll when cursor leaves screen
set scrolloff=3 " minimum lines to keep above and below cursor
set gdefault " the /g flag on :s substitutions by default

set modeline 
set modelines=5

""--todo: set magic=very
nnoremap / /\v
vnoremap / /\v
nnoremap ? /\v
vnoremap ? ?\v
cnoremap %s/ %s/\v


" Windows focus movements
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" automatically resize windows 
autocmd vimResized * :wincmd =

" TODO: I need to spend some time to be comfortable with vim folds
" set foldenable " auto fold code

" Formatting 
set nowrap " wrap long lines
set autoindent " indent at the same level of the previous line
set shiftwidth=2 " use indents of 2 spaces
set expandtab " tabs are spaces, not tabs
set tabstop=2 " an indentation every two columns
"set softtabstop=2 " let backspace delete indent
set matchpairs+=<:> " match, to be used with %
"set pastetoggle=<F12> " pastetoggle (sane indentation on pastes)


" Key (re)Mappings 
" Making it so ; works like : for commands. Saves typing and eliminates :W style typos due to lazy holding shift.
nnoremap ; :

" set digraph if working with French file

" when you forgot to sudo before editing a file
cmap sw  w  !sudo tee % >/dev/null 

let mapleader=","
"quick edit/reload the vimrc file
nmap <silent> <leader>v :tabedit $MYVIMRC<CR>
nmap <silent> <leader>s :source $MYVIMRC<CR>

nmap <silent> <leader>b ysiw*<ESC>
nmap <silent> <leader>2b ebys2w*<ESC>
nmap <silent> <leader>3b ebys3w*<ESC>
nmap <silent> <leader>4b ebys4w*<ESC>
nmap <silent> <leader>5b ebys5w*<ESC>
nmap <silent> <leader>6b ebys6w*<ESC>
nmap <silent> <leader>p <c-p>

" copy the configuration of routers 
nmap <silent> <leader>r1 /R1<CR>yip<ESC>
nmap <silent> <leader>r2 /R2<CR>yip<ESC>
nmap <silent> <leader>r3 /R3<CR>yip<ESC>
nmap <silent> <leader>r4 /R4<CR>yip<ESC>
nmap <silent> <leader>r5 /R5<CR>yip<ESC>
nmap <silent> <leader>r6 /R6<CR>yip<ESC>
nmap <silent> <leader>r7 /R7<CR>yip<ESC>
nmap <silent> <leader>r8 /R8<CR>yip<ESC>
nmap <silent> <leader>r9 /R9<CR>yip<ESC>
nmap <silent> <leader>r10 /R10<CR>yip<ESC>
nmap <silent> <leader>s1 /S1<CR>yip<ESC>
nmap <silent> <leader>s2 /S2<CR>yip<ESC>
nmap <silent> <leader>s3 /S3<CR>yip<ESC>
nmap <silent> <leader>s4 /S4<CR>yip<ESC>


set ttyfast " send more characters for redraws"

"source vimrc each time I save it
if has("autocmd")
  autocmd bufwritepost .vimrc source $MYVIMRC
end

"edit list of abbreviations 
nmap <silent> <leader>a :tabedit ~/.vim/abbreviations.txt<CR>

set listchars=""
" Fuzzy Finder 
""" Fuzzy Find file, tree, buffer, line
"nmap <leader>ff :FufFile **/<CR>
"nmap <leader>ft :FufFile<CR>
"nmap <leader>fb :FufBuffer<CR>
"nmap <leader>fl :FufLine<CR>
"nmap <leader>fr :FufRenewCache<CR>

"dbext database plugin
"let g:dbext_default_profile = 'type=MYSQL:user=root:passwd=kyamukende:dbname=otrs:extra=-t'
let g:dbext_default_profile_ODBC = 'type=ODBC:dsnname=acdis:user=acapp_otrs:passwd=kyamukende:dbname=acdis'
let g:dbext_default_history_file = '~/.vim/dbext_sql_history.txt'

source ~/.vim/abbreviations.txt

imap <F2>  <c-r>=strftime("%Y-%m-%d %a %H:%M")<cr>
nmap <F2>  a<C-R>=strftime("%Y-%m-%d %a %H:%M")<CR><ESC>
imap <F3> <C-R>=strftime("%H%M")<CR>
nmap <F3> a<C-R>=strftime("%H%M")<CR><esc>
set clipboard=unnamedplus
vnoremap P <ESC>"+gP
nnoremap P <ESC>"+gP
nnoremap Y <ESC>"+y
vnoremap Y <ESC>"+y

set autowriteall " automatically write a file when leaving a modified buffer

" Gemmfile, Rakefile, Vagrantfile, Thorfile are Ruby"
au BufRead, BufNewFile {Gemfile,Gemfile.lock,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby
au BufRead, BufNewFile {*.asciidoc,*.adoc,*.ad} set ft= asciidoc

" enable compiler support for ruby
compiler ruby

" to be removed 
set maxmempattern=200000

"needed for ruby text objects
runtime macros/matchit.vim

" Ultisnips 
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsSnippetDirectories=["UltiSnips"]

set tags=./tags;

" Gundo
nnoremap <leader>u :GundoToggle<cr>
let g:gundo_close_on_revert=1

" Rails.vim 
"  :Rfea item
"todo: Add this with projection
let g:rails_projections = { 
      \ "test/features/*_test.rb": { 
            \"command": "feature", 
            \ "template": "class %SDecorator < SimpleDelegator\nend", 
            \ "test": [ "test/features/%s" ],
            \ "affinity": "model" 
      \ }}



 
